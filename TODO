-*- text -*-

-: open; @: work in progress; +: done; *: denied;

Weights/urgencies:
    Bug:   this is a problem that needs to be fixed
    Need:  must be done for further progress
    Do:    not as urgent as Need, but definitely do some time
    Want:  I really want this, but it is not urgent
    Nice:  nice to have for sure, but lower priority
    TBD:   to be decided

  @ pass the regtests. The regtests will in parts be adapted in the
    process. Need.

  - default return value in elt. Need. See elt tests in 006.

    Problem: currently, we cannot know if an optional parameter has
    been specified or not; in the latter case we just get the
    default value. We also cannot use a special value to signal
    non-specified-ness, because that would mask the fact that the
    same value might have been specified. So, we'd to signal that
    in another way. See CLHS 3.4.1.2, "Specifiers for optional
    parameters": "&optional (param defaultvalue param-supplied-p)"

    This would help, I am just pondering how to implement that. For
    Builtins, I could pass another array or map; maybe the
    declaration in init-builtins would not even need to be different
    as I could just pass this array every time. For Lambdas, parsing
    the parameter list would get just this bit more expensive; and
    then I'd need to bind the supplied-p parameter.

  - Character data type. Need.

  - a string output buffer stream type, if only for the regtests.
    Need.

  - Be able to set warnings-as-errors from Lisp. Do.

  - a flush/close list for streams to be processed in atexit() (if
    there is such a thing...) Need.

  - \d does not work in a regexp literal. Bug, but still not urgent.

  - make desc => toString() and toString() => value? makes a lot of
    casual object printing easier or rather more descriptive. TBD.

  - An interactive line editor (probably JLine). Not having one is a
    pain in the afternoon. This what I Want, what I really really want.
    I will most likely not get to the point where I can edit the whole
    expression, but being able to edit single lines would already be a
    big win.

  - clean up the conditionals: have cond as builtin; if, when,
    unless, as macros. Should not have a perceptible performance
    impact. Want, but maybe only after the regtests. Wait, how long
    will they take? hm..,.

  - For startup/preload problems: debug reader-lines? Maybe no
    longer needed. That would need line buffering in the stream, not
    difficult due to BufferedReader.readLine(). TBD.

  - destructuring bind in (let ) like I had it in lingo; that is not
    only very convenient, but I guess also a small performance gain.
    Want. Maybe with a different name, though. Maybe not let-destruct,
    which sounds somewhat wrong. :-)
    Update: there *is* already a (destructuring-bind ...) in the CLHS.
    *Also*, destructuring llambda lists. *Also* improper lambda lists,
    which I might...


  - pathname operations like directory-p, file-p, symlink-p fifo-p,
    device-p, socket-p, etc. with a "don't follow symlink" flag.
    Want.

  - Try compressing lisp code (read in and print out unformatted) in
    preload, *maybe* startup will be a tad faster. Will only work if
    we already have a running lyk, so, self-dependency, Â¡yay! Want.


  + function-definition; obviously, for Lambdas and Macros only.
    Need, for 007.

  + Get the regtests going. Implies a number of things to implement
    so I can run the lingo regtest code. Or write it anew? Huh, not
    keen on that, actually. Need. => regtests are running!

  + read-line. Need, urgently.

  + dolist, dotimes without with-gensyms. Need (regtests).

  + Environment functions env-table, env-vars. Need.

  + *process* environment functions getenv, setenv, process-env
    (returns a table). Need. => no setenv though; environment can be
    modified for a subprocess, but not the current one.

  + listdir or whatever (directory-files pathname). Need (regtests).

    Kotlin has Path.listDirectoryEntries(), but what is a Path? It
    is an Interface, but File does not implement it, obviously, nor
    does it have a constructor (which makes sense).

    Indeed File(dirname).listDir(); contains the dirname, though.
    Have (directory-entries pathname) now.

  + defined-in property for all function symbols. Need.

  + Some file not found handling; currently it bombs with a Java
    exception. Need, definitely.

  + builtin (exit &optional (exit-status 0)). Need.

  + BUG: defined-in properties are set in flet, which they
    shouldn't.


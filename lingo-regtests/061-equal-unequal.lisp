(require 'regtests)

(test-is "equal num 1" (equal 0.1 0.1) t)
(test-is "equal num 2" (equal 0.1 0.2) nil)
(test-is "equal num 3" (equal 3 3) t)
(test-is "equal num 4" (equal 3 3.1) nil)
(test-is "equal num 5" (equal -4 -4.0000) t)
(test-is "equal num 6" (equal -4.000001 -4.000002) nil)
(test-is "equal num 7" (equal (** 2 62) (** 2 62)) t)

(test-is "eq num 1" (eq 0.1 0.1) t)
(test-is "eq num 2" (eq 0.1 0.2) nil)
(test-is "eq num 3" (eq 3 3) t)
(test-is "eq num 4" (eq 3 3.1) nil)
(test-is "eq num 5" (eq -4 -4.0000) t)
(test-is "eq num 6" (eq -4.000001 -4.000002) nil)
(test-is "eq num 7" (eq (** 2 62) (** 2 62)) t)

(test-is "=/= num 1" (=/= 0.1 0.1) nil)
(test-is "=/= num 2" (=/= 0.1 0.2) t)
(test-is "=/= num 3" (=/= 3 3) nil)
(test-is "=/= num 4" (=/= 3 3.1) t)
(test-is "=/= num 5" (=/= -4 -4.0000) nil)
(test-is "=/= num 6" (=/= -4.000001 -4.000002) t)
(test-is "=/= num 7" (=/= (** 2 62) (** 2 62)) nil)

(test-is "equal string 1" (equal "lala" "haddada") nil)
(test-is "equal string 2" (equal "haddada" "haddada") t)
(test-is "equal string 3" (equal "haddada" 'haddada) nil)
(test-is "equal string 4" (equal "haddada" (string 'haddada)) t)

(test-is "eq string 1" (eq "lala" "haddada") nil)
(test-is "eq string 2" (eq "haddada" "haddada") t)
(test-is "eq string 3" (eq "haddada" 'haddada) nil)
(test-is "eq string 4" (eq "haddada" (string 'haddada)) t)

(test-is "=/= string 1" (=/= "lala" "haddada") t)
(test-is "=/= string 2" (=/= "haddada" "haddada") nil)
(test-is "=/= string 3" (=/= "haddada" 'haddada) t)
(test-is "=/= string 4" (=/= "haddada" (string 'haddada)) nil)

(test-is "equal symbol 1" (equal 'nananaanaa 'nananaanaa) t)
(test-is "equal symbol 2" (equal 'nananaanaa 'nananaanaaa) nil)
(test-is "equal symbol 3" (equal 'nananaanaa (intern "nananaanaaa")) nil)
(test-is "equal symbol 4" (equal 'nananaanaa (intern "nananaanaa")) t)
(test-is "equal symbol 5" (equal (gensym "lalala") (gensym "lalala")) nil)

(test-is "eq symbol 1" (eq 'nananaanaa 'nananaanaa) t)
(test-is "eq symbol 2" (eq 'nananaanaa 'nananaanaaa) nil)
(test-is "eq symbol 3" (eq 'nananaanaa (intern "nananaanaaa")) nil)
(test-is "eq symbol 4" (eq 'nananaanaa (intern "nananaanaa")) t)
(test-is "eq symbol 5" (eq (gensym "lalala") (gensym "lalala")) nil)

(test-is "=/= symbol 1" (=/= 'nananaanaa 'nananaanaa) nil)
(test-is "=/= symbol 2" (=/= 'nananaanaa 'nananaanaaa) t)
(test-is "=/= symbol 3" (=/= 'nananaanaa (intern "nananaanaaa")) t)
(test-is "=/= symbol 4" (=/= 'nananaanaa (intern "nananaanaa")) nil)
(test-is "=/= symbol 5" (=/= (gensym "lalala") (gensym "lalala")) t)

(test-is "equal cons 1" (equal (cons 'a 'b) (cons 'a 'b)) t)
(test-is "equal cons 2" (equal '(a . b) '(a . b)) t)
(test-is "equal cons 3" (equal '(1 2 3 4 5 6)
                               (make-list 6 (let ((n 1))
                                              (lambda ()
                                                (prog1 n
                                                  (incf n)))))) t)
(test-is "equal cons 4" (equal '(((3 4 . 5) 119) b c ((3 (c v) u)) . nil)
                               '(((3 4 . 5) 119) b c ((3 (c v) u))))
         t)
(test-is "equal cons 5" (equal (cons 'a 'b) (cons 'a 'c)) nil)
(test-is "equal cons 6" (equal '(a . b) '(a  b)) nil)
(test-is "equal cons 7" (equal '(1 2 3 4 5 6 7)
                               (make-list 6 (let ((n 1))
                                              (lambda ()
                                                (prog1 n
                                                  (incf n)))))) nil)
(test-is "equal cons 8" (equal '(((3 4 . 5) 119) b c ((3 (c v) u)) . nil)
                               '(((3 4 . 5) 119) b c ((3.1 (c v) u))))
         nil)
(test-is "equal cons 9" (let* ((a (make-list 6 (let ((n 1))
                                                 (lambda ()
                                                   (prog1 n
                                                     (incf n))))))
                               (b a))
                          (equal a b)) t)

(test-is "eq cons 1" (eq (cons 'a 'b) (cons 'a 'b)) nil)
(test-is "eq cons 2" (eq '(a . b) '(a . b)) nil)
(test-is "eq cons 3" (eq '(1 2 3 4 5 6)
                         (make-list 6 (let ((n 1))
                                        (lambda ()
                                          (prog1 n
                                            (incf n)))))) nil)
(test-is "eq cons 4" (eq '(((3 4 . 5) 119) b c ((3 (c v) u)) . nil)
                         '(((3 4 . 5) 119) b c ((3 (c v) u))))
         nil)
(test-is "eq cons 5" (eq (cons 'a 'b) (cons 'a 'c)) nil)
(test-is "eq cons 6" (eq '(a . b) '(a  b)) nil)
(test-is "eq cons 7" (eq '(1 2 3 4 5 6 7)
                         (make-list 6 (let ((n 1))
                                        (lambda ()
                                          (prog1 n
                                            (incf n)))))) nil)
(test-is "eq cons 8" (eq '(((3 4 . 5) 119) b c ((3 (c v) u)) . nil)
                         '(((3 4 . 5) 119) b c ((3.1 (c v) u))))
         nil)
(test-is "eq cons 9" (let* ((a (make-list 6 (let ((n 1))
                                              (lambda ()
                                                (prog1 n
                                                  (incf n))))))
                            (b a))
                       (eq a b)) t)

(test-is "=/= cons 1" (=/= (cons 'a 'b) (cons 'a 'b)) nil)
(test-is "=/= cons 2" (=/= '(a . b) '(a . b)) nil)
(test-is "=/= cons 3" (=/= '(1 2 3 4 5 6)
                           (make-list 6 (let ((n 1))
                                          (lambda ()
                                            (prog1 n
                                              (incf n)))))) nil)
(test-is "=/= cons 4" (=/= '(((3 4 . 5) 119) b c ((3 (c v) u)) . nil)
                           '(((3 4 . 5) 119) b c ((3 (c v) u))))
         nil)
(test-is "=/= cons 5" (=/= (cons 'a 'b) (cons 'a 'c)) t)
(test-is "=/= cons 6" (=/= '(a . b) '(a  b)) t)
(test-is "=/= cons 7" (=/= '(1 2 3 4 5 6 7)
                           (make-list 6 (let ((n 1))
                                          (lambda ()
                                            (prog1 n
                                              (incf n)))))) t)
(test-is "=/= cons 8" (=/= '(((3 4 . 5) 119) b c ((3 (c v) u)) . nil)
                           '(((3 4 . 5) 119) b c ((3.1 (c v) u))))
         t)
(test-is "=/= cons 9" (let* ((a (make-list 6 (let ((n 1))
                                               (lambda ()
                                                 (prog1 n
                                                   (incf n))))))
                             (b a))
                        (=/= a b)) nil)

(defparameter a #(3 4 5))
(defparameter b #(3 4 5))
(defparameter c a)
(test-is "equal vector b" (equal a b) t)
(test-is "equal vector c" (equal a c) t)
(test-is "eq vector b" (eq a b) nil)
(test-is "eq vector c" (eq a c) t)
(test-is "=/= vector b" (=/= a b) nil)
(test-is "=/= vector c" (=/= a c) nil)

(defparameter a #:((a . 3)(b . 4)(c . 5)))
(defparameter b #:((a . 3)(b . 4)(c . 5)))
(defparameter c a)
(test-is "equal table b" (equal a b) t)
(test-is "equal table c" (equal a c) t)
(test-is "eq table b" (eq a b) nil)
(test-is "eq table c" (eq a c) t)
(test-is "=/= table b" (=/= a b) nil)
(test-is "=/= table c" (=/= a c) nil)

(test-is "equal table 2" (equal #:((3 . 4)("lala" . 6))
                                #:((3 . 4)("lala" . 6)))
         t)
(test-is "eq table 2" (eq #:((3 . 4)("lala" . 6))
                          #:((3 . 4)("lala" . 6)))
         nil)
(test-is "=/= table 2" (=/= #:((3 . 4)("lala" . 6))
                            #:((3 . 4)("lala" . 6)))
         nil)

(done-testing)

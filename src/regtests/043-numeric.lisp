(require 'regtests)

(test-err "conjugate 0" (conjugate)
          #/function .* is not implemented/)
(test-err "cis 0" (cis)
          #/function .* is not implemented/)
(test-err "rational 0" (rational)
          #/function .* is not implemented/)
(test-err "rationalize 0" (rationalize)
          #/function .* is not implemented/)

(test-is "minusp 0" (minusp 0) nil)
(test-is "minusp 3" (minusp 3) nil)
(test-is "minusp -3" (minusp -3) t)

(test-is "plusp 0" (plusp 0) nil)
(test-is "plusp 3" (plusp 3) t)
(test-is "plusp -3" (plusp -3) nil)

(test-is "integer-length 0" (integer-length 0) 0)
(test-is "integer-length 1" (integer-length 1) 1)
(test-is "integer-length 2" (integer-length 3) 2)
(test-is "integer-length 4" (integer-length 4) 3)
(test-is "integer-length 5" (integer-length 7) 3)
(test-is "integer-length 6" (integer-length -1) 0)
(test-is "integer-length 7" (integer-length -4) 2)
(test-is "integer-length 8" (integer-length -7) 3)
(test-is "integer-length 9" (integer-length -8) 3)
(test-is "integer-length 10" (integer-length (expt 2 9)) 10)
(test-is "integer-length 11" (integer-length (1- (expt 2 9))) 9)
(test-is "integer-length 12" (integer-length (- (expt 2 9))) 9)
(test-is "integer-length 13" (integer-length (- (1+ (expt 2 9)))) 10)

(test-is "ash a" (ash 16 1) 32)
(test-is "ash b" (ash 16 0) 16)
(test-is "ash c" (ash 16 -1) 8)
(test-is "ash d" (ash 48 2) 192)
(test-is "ash e" (ash 48 -2) 12)

(test-is "numerator 1" (numerator 0) 0)
(test-is "numerator 2" (numerator 2) 2)
(test-is "numerator 3" (numerator 3.4) 3.4)
(test-is "numerator 4" (numerator -412) -412)
(test-is "numerator 5" (numerator 0.000005) 0.000005)
(test-is "numerator 6" (numerator 1e3) 1000)

(test-is "denominator 1" (denominator 0) 1)
(test-is "denominator 2" (denominator 2) 1)
(test-is "denominator 3" (denominator 3.4) 1)
(test-is "denominator 4" (denominator -412) 1)
(test-is "denominator 5" (denominator 0.000005) 1)
(test-is "denominator 6" (denominator 1e3) 1)

(test-is "realpart 1" (realpart 0) 0)
(test-is "realpart 2" (realpart 2) 2)
(test-is "realpart 3" (realpart 3.4) 3.4)
(test-is "realpart 4" (realpart -412) -412)
(test-is "realpart 5" (realpart 0.000005) 0.000005)
(test-is "realpart 6" (realpart 1e3) 1000)

(test-is "imagpart 1" (imagpart 0) 0)
(test-is "imagpart 2" (imagpart 2) 0)
(test-is "imagpart 3" (imagpart 3.4) 0)
(test-is "imagpart 4" (imagpart -412) 0)
(test-is "imagpart 5" (imagpart 0.000005) 0)
(test-is "imagpart 6" (imagpart 1e3) 0)

(test-is "phase 1" (phase 0) 0)
(test-is "phase 2" (phase 2) (pi))
(test-is "phase 3" (phase 3.4) (pi))
(test-is "phase 4" (phase -412) (- (pi)))
(test-is "phase 5" (phase 0.000005) (pi))
(test-is "phase 6" (phase 1e3) (pi))

(test-is "pi" (pi) 3.141592653589793)
(test-is "e" (e) 2.718281828459045)

(test-is "ceiling 4" (ceiling 4) 4)
(test-is "ceiling 2.6" (ceiling 2.6) 3)
(test-is "ceiling 2.5" (ceiling 2.5) 3)
(test-is "ceiling 2.4" (ceiling 2.4) 3)
(test-is "ceiling 2" (ceiling 2) 2)
(test-is "ceiling 0.7" (ceiling 0.7) 1)
(test-is "ceiling 0.3" (ceiling 0.3) 1)
(test-is "ceiling 0" (ceiling 0) 0)
(test-is "ceiling -0.3" (ceiling -0.3) 0)
(test-is "ceiling -0.7" (ceiling -0.7) 0)
(test-is "ceiling -2" (ceiling -2) -2)
(test-is "ceiling -2.4" (ceiling -2.4) -2)
(test-is "ceiling -2.5" (ceiling -2.5) -2)
(test-is "ceiling -2.6" (ceiling -2.6) -2)
(test-is "ceiling -4" (ceiling -4) -4)

(test-is "fceiling 4" (fceiling 4) 4)
(test-is "fceiling 2.6" (fceiling 2.6) 3)
(test-is "fceiling 2.5" (fceiling 2.5) 3)
(test-is "fceiling 2.4" (fceiling 2.4) 3)
(test-is "fceiling 2" (fceiling 2) 2)
(test-is "fceiling 0.7" (fceiling 0.7) 1)
(test-is "fceiling 0.3" (fceiling 0.3) 1)
(test-is "fceiling 0" (fceiling 0) 0)
(test-is "fceiling -0.3" (fceiling -0.3) 0)
(test-is "fceiling -0.7" (fceiling -0.7) 0)
(test-is "fceiling -2" (fceiling -2) -2)
(test-is "fceiling -2.4" (fceiling -2.4) -2)
(test-is "fceiling -2.5" (fceiling -2.5) -2)
(test-is "fceiling -2.6" (fceiling -2.6) -2)
(test-is "fceiling -4" (fceiling -4) -4)

(test-is "round 4" (round 4) 4)
(test-is "round 2.6" (round 2.6) 3)
(test-is "round 2.5" (round 2.5) 2)
(test-is "round 2.4" (round 2.4) 2)
(test-is "round 2" (round 2) 2)
(test-is "round 0.7" (round 0.7) 1)
(test-is "round 0.3" (round 0.3) 0)
(test-is "round 0" (round 0) 0)
(test-is "round -0.3" (round -0.3) 0)
(test-is "round -0.7" (round -0.7) -1)
(test-is "round -2" (round -2) -2)
(test-is "round -2.4" (round -2.4) -2)
(test-is "round -2.5" (round -2.5) -2)
(test-is "round -2.6" (round -2.6) -3)
(test-is "round -4" (round -4) -4)

(test-is "fround 4" (fround 4) 4)
(test-is "fround 2.6" (fround 2.6) 3)
(test-is "fround 2.5" (fround 2.5) 2)
(test-is "fround 2.4" (fround 2.4) 2)
(test-is "fround 2" (fround 2) 2)
(test-is "fround 0.7" (fround 0.7) 1)
(test-is "fround 0.3" (fround 0.3) 0)
(test-is "fround 0" (fround 0) 0)
(test-is "fround -0.3" (fround -0.3) 0)
(test-is "fround -0.7" (fround -0.7) -1)
(test-is "fround -2" (fround -2) -2)
(test-is "fround -2.4" (fround -2.4) -2)
(test-is "fround -2.5" (fround -2.5) -2)
(test-is "fround -2.6" (fround -2.6) -3)
(test-is "fround -4" (fround -4) -4)

(test-is "floor 4" (floor 4) 4)
(test-is "floor 2.6" (floor 2.6) 2)
(test-is "floor 2.5" (floor 2.5) 2)
(test-is "floor 2.4" (floor 2.4) 2)
(test-is "floor 2" (floor 2) 2)
(test-is "floor 0.7" (floor 0.7) 0)
(test-is "floor 0.3" (floor 0.3) 0)
(test-is "floor 0" (floor 0) 0)
(test-is "floor -0.3" (floor -0.3) -1)
(test-is "floor -0.7" (floor -0.7) -1)
(test-is "floor -2" (floor -2) -2)
(test-is "floor -2.4" (floor -2.4) -3)
(test-is "floor -2.5" (floor -2.5) -3)
(test-is "floor -2.6" (floor -2.6) -3)
(test-is "floor -4" (floor -4) -4)

(test-is "ffloor 4" (ffloor 4) 4)
(test-is "ffloor 2.6" (ffloor 2.6) 2)
(test-is "ffloor 2.5" (ffloor 2.5) 2)
(test-is "ffloor 2.4" (ffloor 2.4) 2)
(test-is "ffloor 2" (ffloor 2) 2)
(test-is "ffloor 0.7" (ffloor 0.7) 0)
(test-is "ffloor 0.3" (ffloor 0.3) 0)
(test-is "ffloor 0" (ffloor 0) 0)
(test-is "ffloor -0.3" (ffloor -0.3) -1)
(test-is "ffloor -0.7" (ffloor -0.7) -1)
(test-is "ffloor -2" (ffloor -2) -2)
(test-is "ffloor -2.4" (ffloor -2.4) -3)
(test-is "ffloor -2.5" (ffloor -2.5) -3)
(test-is "ffloor -2.6" (ffloor -2.6) -3)
(test-is "ffloor -4" (ffloor -4) -4)

(defparameter round1 3.0000000456)
(defparameter round2 2.999999456)
(defparameter round-t0 '((4)
                         (5 6 7
                            (13 14 (9)))
                         33 44 55))
(defparameter round-t1 '((4.000004)
                         (5.000004 5.999996 7.0000006
                          (13 14.0000007 (8.99999994)))
                         33.0000003 43.9999997 54.999999991))
(defparameter round-v0 #(#(4)
                         #(5 6 7
                             #(13 14 #(9)))
                         33 44 55))
(defparameter round-v1 #(#(4.000004)
                           #(5.000004 5.999996 7.0000006
                                      #(13 14.0000007 #(8.99999994)))
                           33.0000003 43.9999997 54.999999991))
(defparameter round-v2 #((4)
                         #(5 6 7
                             (13 14 #(9)))
                         33 44 55))
(defparameter round-v3 #((4.000004)
                         #(5.000004 5.999996 7.0000006
                                    (13 14.0000007 #(8.99999994)))
                         33.0000003 43.9999997 54.999999991))

(test-is "roundto5 1" (roundto5 round1) 3)
(test-is "roundto5 2" (roundto5 round2) 3)
(test-is "roundtree t0" (round-deep round-t1) round-t0)
(test-is "roundtree v0" (round-deep round-v1) round-v0)
(test-is "roundtree v2" (round-deep round-v3) round-v2)


(test-num "log (e)" (log (e)) 1)
(test-num "log 1" (log 1) 0)
(test-num "log 54.59815003314423" (log 54.59815003314423) 4)
(test-num "log 1 10" (log 1 10) 0)
(test-num "log 10 10" (log 10 10) 1)
(test-num "log 1000 10" (log 1000 10) 3)
(test-num "log 1 2" (log 1 2) 0)
(test-num "log 2 2" (log 2 2) 1)
(test-num "log 1024 2" (log 1024 2) 10)
(test-num "log 1 3" (log 1 3) 0)
(test-num "log 3 3" (log 3 3) 1)
(test-num "log 81 3" (log 81 3) 4)

(test-num "exp 0" (exp 0) 1)
(test-num "exp 1" (exp 1) (e))
(test-num "exp 2" (exp 2) (* (e) (e)))
(test-num "exp 3" (exp 3) (* (e) (e) (e)))
(test-num "exp (pi)" (exp (pi)) 23.140692632779267)

(test-num "atanh 4" (atanh 4) NaN)
(test-num "atanh 2.6" (atanh 2.6) NaN)
(test-num "atanh 2.5" (atanh 2.5) NaN) 
(test-num "atanh 2.4" (atanh 2.4) NaN)
(test-num "atanh 2" (atanh 2) NaN)
(test-num "atanh 0.7" (atanh 0.7) 0.8673005)
(test-num "atanh 0.3" (atanh 0.3) 0.30951962)
(test-num "atanh 0" (atanh 0) 0)
(test-num "atanh -0.3" (atanh -0.3) -0.30951962)
(test-num "atanh -0.7" (atanh -0.7) -0.8673005)
(test-num "atanh -2" (atanh -2) NaN)
(test-num "atanh -2.4" (atanh -2.4) NaN)
(test-num "atanh -2.5" (atanh -2.5) NaN)
(test-num "atanh -2.6" (atanh -2.6) NaN)
(test-num "atanh -4" (atanh -4) NaN)

(test-num "acosh 4" (acosh 4) 2.063437)
(test-num "acosh 2.6" (acosh 2.6) 1.6094378)
(test-num "acosh 2.5" (acosh 2.5) 1.5667993)
(test-num "acosh 2.4" (acosh 2.4) 1.522079)
(test-num "acosh 2" (acosh 2) 1.316958)
(test-num "acosh 0.7" (acosh 0.7) NaN)
(test-num "acosh 0.3" (acosh 0.3) NaN)
(test-num "acosh 0" (acosh 0) NaN)
(test-num "acosh -0.3" (acosh -0.3) NaN)
(test-num "acosh -0.7" (acosh -0.7) NaN)
(test-num "acosh -2" (acosh -2) NaN)
(test-num "acosh -2.4" (acosh -2.4) NaN)
(test-num "acosh -2.5" (acosh -2.5) NaN)
(test-num "acosh -2.6" (acosh -2.6) NaN)
(test-num "acosh -4" (acosh -4) NaN)

(test-num "asinh 4" (asinh 4) 2.0947125)
(test-num "asinh 2.6" (asinh 2.6) 1.6837431)
(test-num "asinh 2.5" (asinh 2.5) 1.6472311)
(test-num "asinh 2.4" (asinh 2.4) 1.609438)
(test-num "asinh 2" (asinh 2) 1.443635)
(test-num "asinh 0.7" (asinh 0.7) 0.65266657)
(test-num "asinh 0.3" (asinh 0.3) 0.29567307)
(test-num "asinh 0" (asinh 0) 0)
(test-num "asinh -0.3" (asinh -0.3) -0.29567307)
(test-num "asinh -0.7" (asinh -0.7) -0.65266657)
(test-num "asinh -2" (asinh -2) -1.443635)
(test-num "asinh -2.4" (asinh -2.4) -1.609438)
(test-num "asinh -2.5" (asinh -2.5) -1.6472311)
(test-num "asinh -2.6" (asinh -2.6) -1.6837431)
(test-num "asinh -4" (asinh -4) -2.0947125)

(test-num "tanh 4" (tanh 4) 0.9993293)
(test-num "tanh 2.6" (tanh 2.6) 0.9890274)
(test-num "tanh 2.5" (tanh 2.5) 0.9866143)
(test-num "tanh 2.4" (tanh 2.4) 0.9836749)
(test-num "tanh 2" (tanh 2) 0.9640276)
(test-num "tanh 0.7" (tanh 0.7) 0.6043678)
(test-num "tanh 0.3" (tanh 0.3) 0.29131263)
(test-num "tanh 0" (tanh 0) 0.0)
(test-num "tanh -0.3" (tanh -0.3) -0.29131263)
(test-num "tanh -0.7" (tanh -0.7) -0.6043678)
(test-num "tanh -2" (tanh -2) -0.9640276)
(test-num "tanh -2.4" (tanh -2.4) -0.9836749)
(test-num "tanh -2.5" (tanh -2.5) -0.9866143)
(test-num "tanh -2.6" (tanh -2.6) -0.9890274)
(test-num "tanh -4" (tanh -4) -0.9993293)


(test-num "cosh 4" (cosh 4) 27.308233)
(test-num "cosh 2.6" (cosh 2.6) 6.7690053)
(test-num "cosh 2.5" (cosh 2.5) 6.1322894)
(test-num "cosh 2.4" (cosh 2.4) 5.5569477)
(test-num "cosh 2" (cosh 2) 3.7621956)
(test-num "cosh 0.7" (cosh 0.7) 1.255169)
(test-num "cosh 0.3" (cosh 0.3) 1.0453385)
(test-num "cosh 0" (cosh 0) 1.0)
(test-num "cosh -0.3" (cosh -0.3) 1.0453385)
(test-num "cosh -0.7" (cosh -0.7) 1.255169)
(test-num "cosh -2" (cosh -2) 3.7621956)
(test-num "cosh -2.4" (cosh -2.4) 5.5569477)
(test-num "cosh -2.5" (cosh -2.5) 6.1322894)
(test-num "cosh -2.6" (cosh -2.6) 6.7690053)
(test-num "cosh -4" (cosh -4) 27.308233)

(test-num "sinh 4" (sinh 4) 27.289917)
(test-num "sinh 2.6" (sinh 2.6) 6.6947317)
(test-num "sinh 2.5" (sinh 2.5) 6.0502043)
(test-num "sinh 2.4" (sinh 2.4) 5.46623)
(test-num "sinh 2" (sinh 2) 3.6268604)
(test-num "sinh 0.7" (sinh 0.7) 0.75858366)
(test-num "sinh 0.3" (sinh 0.3) 0.3045203)
(test-num "sinh 0" (sinh 0) 0.0)
(test-num "sinh -0.3" (sinh -0.3) -0.3045203)
(test-num "sinh -0.7" (sinh -0.7) -0.75858366)
(test-num "sinh -2" (sinh -2) -3.6268604)
(test-num "sinh -2.4" (sinh -2.4) -5.46623)
(test-num "sinh -2.5" (sinh -2.5) -6.0502043)
(test-num "sinh -2.6" (sinh -2.6) -6.6947317)
(test-num "sinh -4" (sinh -4) -27.289917)

(test-num "atan 4" (atan 4) 1.3258177)
(test-num "atan 2.6" (atan 2.6) 1.2036225)
(test-num "atan 2.5" (atan 2.5) 1.19029)
(test-num "atan 2.4" (atan 2.4) 1.1760052)
(test-num "atan 2" (atan 2) 1.1071488)
(test-num "atan 0.7" (atan 0.7) 0.61072594)
(test-num "atan 0.3" (atan 0.3) 0.29145682)
(test-num "atan 0" (atan 0) 0.0)
(test-num "atan -0.3" (atan -0.3) -0.29145682)
(test-num "atan -0.7" (atan -0.7) -0.61072594)
(test-num "atan -2" (atan -2) -1.1071488)
(test-num "atan -2.4" (atan -2.4) -1.1760052)
(test-num "atan -2.5" (atan -2.5) -1.19029)
(test-num "atan -2.6" (atan -2.6) -1.2036225)
(test-num "atan -4" (atan -4) -1.3258177)

(test-num "acos 4" (acos 4) NaN)
(test-num "acos 2.6" (acos 2.6) NaN)
(test-num "acos 2.5" (acos 2.5) NaN)
(test-num "acos 2.4" (acos 2.4) NaN)
(test-num "acos 2" (acos 2) NaN)
(test-num "acos 0.7" (acos 0.7) 0.79539883)
(test-num "acos 0.3" (acos 0.3) 1.2661036)
(test-num "acos 0" (acos 0) 1.5707964)
(test-num "acos -0.3" (acos -0.3) 1.875489)
(test-num "acos -0.7" (acos -0.7) 2.3461938)
(test-num "acos -2" (acos -2) NaN)
(test-num "acos -2.4" (acos -2.4) NaN)
(test-num "acos -2.5" (acos -2.5) NaN)
(test-num "acos -2.6" (acos -2.6) NaN)
(test-num "acos -4" (acos -4) NaN)

(test-num "asin 4" (asin 4) NaN)
(test-num "asin 2.6" (asin 2.6) NaN)
(test-num "asin 2.5" (asin 2.5) NaN)
(test-num "asin 2.4" (asin 2.4) NaN)
(test-num "asin 2" (asin 2) NaN)
(test-num "asin 0.7" (asin 0.7) 0.7753975)
(test-num "asin 0.3" (asin 0.3) 0.30469266)
(test-num "asin 0" (asin 0) 0.0)
(test-num "asin -0.3" (asin -0.3) -0.30469266)
(test-num "asin -0.7" (asin -0.7) -0.7753975)
(test-num "asin -2" (asin -2) NaN)
(test-num "asin -2.4" (asin -2.4) NaN)
(test-num "asin -2.5" (asin -2.5) NaN)
(test-num "asin -2.6" (asin -2.6) NaN)
(test-num "asin -4" (asin -4) NaN)

(test-num "tan 4" (tan 4) 1.1578213)
(test-num "tan 2.6" (tan 2.6) -0.6015968)
(test-num "tan 2.5" (tan 2.5) -0.7470223)
(test-num "tan 2.4" (tan 2.4) -0.91601413)
(test-num "tan 2" (tan 2) -2.1850398)
(test-num "tan 0.7" (tan 0.7) 0.8422884)
(test-num "tan 0.3" (tan 0.3) 0.30933627)
(test-num "tan 0" (tan 0) 0.0)
(test-num "tan -0.3" (tan -0.3) -0.30933627)
(test-num "tan -0.7" (tan -0.7) -0.8422884)
(test-num "tan -2" (tan -2) 2.1850398)
(test-num "tan -2.4" (tan -2.4) 0.91601413)
(test-num "tan -2.5" (tan -2.5) 0.7470223)
(test-num "tan -2.6" (tan -2.6) 0.6015968)
(test-num "tan -4" (tan -4) -1.1578213)

(test-num "cos 4" (cos 4) -0.6536436)
(test-num "cos 2.6" (cos 2.6) -0.8568887)
(test-num "cos 2.5" (cos 2.5) -0.8011436)
(test-num "cos 2.4" (cos 2.4) -0.7373938)
(test-num "cos 2" (cos 2) -0.41614684)
(test-num "cos 0.7" (cos 0.7) 0.7648422)
(test-num "cos 0.3" (cos 0.3) 0.9553365)
(test-num "cos 0" (cos 0) 1.0)
(test-num "cos -0.3" (cos -0.3) 0.9553365)
(test-num "cos -0.7" (cos -0.7) 0.7648422)
(test-num "cos -2" (cos -2) -0.41614684)
(test-num "cos -2.4" (cos -2.4) -0.7373938)
(test-num "cos -2.5" (cos -2.5) -0.8011436)
(test-num "cos -2.6" (cos -2.6) -0.8568887)
(test-num "cos -4" (cos -4) -0.6536436)

(test-num "sin 4" (sin 4) -0.7568025)
(test-num "sin 2.6" (sin 2.6) 0.51550144)
(test-num "sin 2.5" (sin 2.5) 0.5984721)
(test-num "sin 2.4" (sin 2.4) 0.67546314)
(test-num "sin 2" (sin 2) 0.9092974)
(test-num "sin 0.7" (sin 0.7) 0.64421767)
(test-num "sin 0.3" (sin 0.3) 0.29552022)
(test-num "sin 0" (sin 0) 0.0)
(test-num "sin -0.3" (sin -0.3) -0.29552022)
(test-num "sin -0.7" (sin -0.7) -0.64421767)
(test-num "sin -2" (sin -2) -0.9092974)
(test-num "sin -2.4" (sin -2.4) -0.67546314)
(test-num "sin -2.5" (sin -2.5) -0.5984721)
(test-num "sin -2.6" (sin -2.6) -0.51550144)
(test-num "sin -4" (sin -4) 0.7568025)

(test-is "integerp 4" (integerp 4) t)
(test-is "integerp 2.6" (integerp 2.6) nil)
(test-is "integerp 2.5" (integerp 2.5) nil)
(test-is "integerp 2.4" (integerp 2.4) nil)
(test-is "integerp 2.0" (integerp 2) t)
(test-is "integerp 0.7" (integerp 0.7) nil)
(test-is "integerp 0.3" (integerp 0.3) nil)
(test-is "integerp 0" (integerp 0) t)
(test-is "integerp -0.3" (integerp -0.3) nil)
(test-is "integerp -0.7" (integerp -0.7) nil)
(test-is "integerp -2" (integerp -2) t)
(test-is "integerp -2.4" (integerp -2.4) nil)
(test-is "integerp -2.5" (integerp -2.5) nil)
(test-is "integerp -2.6" (integerp -2.6) nil)
(test-is "integerp -4" (integerp -4) t)

(test-num "abs 4" (abs 4) 4)
(test-num "abs 2.6" (abs 2.6) 2.6)
(test-num "abs 2.5" (abs 2.5) 2.5)
(test-num "abs 2.4" (abs 2.4) 2.4)
(test-num "abs 2" (abs 2) 2)
(test-num "abs 0.7" (abs 0.7) 0.7)
(test-num "abs 0.3" (abs 0.3) 0.3)
(test-num "abs 0.0" (abs 0) 0)
(test-num "abs -0.3" (abs -0.3) 0.3)
(test-num "abs -0.7" (abs -0.7) 0.7)
(test-num "abs -2" (abs -2) 2)
(test-num "abs -2.4" (abs -2.4) 2.4)
(test-num "abs -2.5" (abs -2.5) 2.5)
(test-num "abs -2.6" (abs -2.6) 2.6)
(test-num "abs -4" (abs -4) 4)

(test-num "signum 4" (signum 4) 1)
(test-num "signum 2.6" (signum 2.6) 1)
(test-num "signum 2.5" (signum 2.5) 1)
(test-num "signum 2.4" (signum 2.4) 1)
(test-num "signum 2" (signum 2) 1)
(test-num "signum 0.7" (signum 0.7) 1)
(test-num "signum 0.3" (signum 0.3) 1)
(test-num "signum 0 43" (signum 0) 0)
(test-num "signum -0.3" (signum -0.3) -1)
(test-num "signum -0.7" (signum -0.7) -1)
(test-num "signum -2" (signum -2) -1)
(test-num "signum -2.4" (signum -2.4) -1)
(test-num "signum -2.5" (signum -2.5) -1)
(test-num "signum -2.6" (signum -2.6) -1)
(test-num "signum -4" (signum -4) -1)

(test-num "truncate 4" (truncate 4) 4)
(test-num "truncate 2.6" (truncate 2.6) 2)
(test-num "truncate 2.5" (truncate 2.5) 2)
(test-num "truncate 2.4" (truncate 2.4) 2)
(test-num "truncate 2" (truncate 2) 2)
(test-num "truncate 0.7" (truncate 0.7) 0)
(test-num "truncate 0.3" (truncate 0.3) 0)
(test-num "truncate 0" (truncate 0) 0)
(test-num "truncate -0.3" (truncate -0.3) 0)
(test-num "truncate -0.7" (truncate -0.7) 0)
(test-num "truncate -2" (truncate -2) -2)
(test-num "truncate -2.4" (truncate -2.4) -2)
(test-num "truncate -2.5" (truncate -2.5) -2)
(test-num "truncate -2.6" (truncate -2.6) -2)
(test-num "truncate -4" (truncate -4) -4)

(test-num "ftruncate 4" (ftruncate 4) 4)
(test-num "ftruncate 2.6" (ftruncate 2.6) 2)
(test-num "ftruncate 2.5" (ftruncate 2.5) 2)
(test-num "ftruncate 2.4" (ftruncate 2.4) 2)
(test-num "ftruncate 2" (ftruncate 2) 2)
(test-num "ftruncate 0.7" (ftruncate 0.7) 0)
(test-num "ftruncate 0.3" (ftruncate 0.3) 0)
(test-num "ftruncate 0" (ftruncate 0) 0)
(test-num "ftruncate -0.3" (ftruncate -0.3) 0)
(test-num "ftruncate -0.7" (ftruncate -0.7) 0)
(test-num "ftruncate -2" (ftruncate -2) -2)
(test-num "ftruncate -2.4" (ftruncate -2.4) -2)
(test-num "ftruncate -2.5" (ftruncate -2.5) -2)
(test-num "ftruncate -2.6" (ftruncate -2.6) -2)
(test-num "ftruncate -4" (ftruncate -4) -4)

(test-is "random" (let ((n 100)
                         (i 0)
                         (sum 0))
                     (while (< i n)
                       (let ((inc (random)))
                         (incf sum inc)
                         ;; (format t "sum[~A] += ~A = ~A~%" i inc sum)
                         )
                       (incf i))
                     (let* ((target (/ n 2))
                            (diff (- target sum))
                            (tolerance (* n 0.1)))
                       ;; (format t "target: ~A; sum: ~A~%" target sum)
                       (and (> sum (- target tolerance))
                            (< sum (+ target tolerance)))))
         t)
                       
(test-is "max 0" (max 30 47 33 21 21 34 3 7 4 15 25) 47)
(test-is "max 1" (max 47 30 33 21 21 34 3 7 4 15 25) 47)
(test-is "max 2" (max 30 33 21 21 34 3 7 4 15 25 47) 47)
(test-is "max 3" (max 30 33 21 21 34 47 3 7 4 15 25) 47)

(test-is "min 0" (min 30 47 33 21 21 34 3 7 4 15 25) 3)
(test-is "min 1" (min 47 30 33 21 21 34 7 4 15 25 3) 3)
(test-is "min 2" (min 3 30 33 21 21 34 7 4 15 25 47) 3)
(test-is "min 3" (min 30 33 21 3 21 34 47 7 4 15 25) 3)

(test-is "prime-number-p" (map #'prime-number-p
                                '(30 47 33 21 21 34 3 7 4 15 25))
         '(nil t nil nil nil nil t t nil nil nil))

(test-is "factor 0" (factor 11) '(11))
(test-is "factor 1" (factor 101) '(101))
(test-is "factor 2" (factor 1001) '(7 11 13))
(test-is "factor 3" (factor 10001) '(73 137))
(test-is "factor 4" (factor 100001) '(11 9091))
(test-is "factor 5" (factor 1000001) '(101 9901))
(test-is "factor 6" (factor 10000001) '(11 909091))
(test-is "factor 7" (factor 100000001) '(17 5882353))
(test-is "factor 8" (factor 1000000001) '(7 11 13 19 52579))
(test-is "factor 9" (factor 10000000001) '(101 3541 27961))
(test-is "factor 10" (factor 100000000001) '(11 11 23 4093 8779))
(test-is "factor 11" (factor 1000000000001) '(73 137 99990001))
(test-is "factor 12" (factor 10000000000001) '(11 859 1058313049))
(test-is "factor 13" (factor 100000000000001) '(29 101 281 121499449))
(test-is "factor 14" (factor 1000000000000001) '(7 11 13 211 241 2161 9091))

(test-num "expt 0 0" (expt 0 0) 1)
(test-num "expt 0 1" (expt 0 1) 0)
(test-num "expt 1 0" (expt 1 0) 1)
(test-num "expt 1 1" (expt 1 1) 1)
(test-num "expt 10 0.5" (expt 10 0.5) 3.16227766)
(test-num "expt 10 1.5" (expt 10 1.5) 31.6227766)
(test-num "expt 10 2" (expt 10 2) 100)
(test-num "expt 3 3" (expt 3 3) 27)
(test-num "expt 4 4" (expt 4 4) 256)
(test-num "expt 3 -2" (expt 3 -2) 0.1111111111)


(test-num "** 0 0" (** 0 0) 1)
(test-num "** 0 1" (** 0 1) 0)
(test-num "** 1 0" (** 1 0) 1)
(test-num "** 1 1" (** 1 1) 1)
(test-num "** 10 0.5" (** 10 0.5) 3.16227766)
(test-num "** 10 1.5" (** 10 1.5) 31.6227766)
(test-num "** 10 2" (** 10 2) 100)
(test-num "** 3 3" (** 3 3) 27)
(test-num "** 4 4" (** 4 4) 256)
(test-num "** 3 -2" (** 3 -2) 0.1111111111)


(test-num "sqrt 4" (sqrt 4) 2.0)
(test-num "sqrt 2.6" (sqrt 2.6) 1.6124516)
(test-num "sqrt 2.5" (sqrt 2.5) 1.5811388)
(test-num "sqrt 2.4" (sqrt 2.4) 1.5491934)
(test-num "sqrt 2" (sqrt 2) 1.4142135)
(test-num "sqrt 0.7" (sqrt 0.7) 0.83666)
(test-num "sqrt 0.3" (sqrt 0.3) 0.5477226)
(test-num "sqrt 0" (sqrt 0) 0.0)
(test-num "sqrt -0.3" (sqrt -0.3) NaN)
(test-num "sqrt -0.7" (sqrt -0.7) NaN)
(test-num "sqrt -2" (sqrt -2) NaN)
(test-num "sqrt -2.4" (sqrt -2.4) NaN)
(test-num "sqrt -2.5" (sqrt -2.5) NaN)
(test-num "sqrt -2.6" (sqrt -2.6) NaN)
(test-num "sqrt -4" (sqrt -4) NaN)

;; incf and decf are tested in 021-incfdecf

(let ((examples '(0 1 2 6 12 15 16 19 32 35 44 48 51 56 59 60 62 72 85 105 106
                    108 109 119 121 136 138 158 176 179 195))
      (results '(0 1 1 2 3 3 4 4 5 5 6 6 7 7 7 7 7 8 9 10 10 10 10 10 11 11 11
                   12 13 13 13 13)))
  (while (and examples results)
    (let ((val (pop examples))
          (res (pop results)))
      (eval `(test-is ,(format nil "isqrt ~A" val) (isqrt ,val) ,res)))))

(test-is "zerop 4" (zerop 4) nil)
(test-is "zerop 2.6" (zerop 2.6) nil)
(test-is "zerop 2.5" (zerop 2.5) nil)
(test-is "zerop 2.4" (zerop 2.4) nil)
(test-is "zerop 2" (zerop 2) nil)
(test-is "zerop 0.7" (zerop 0.7) nil)
(test-is "zerop 0.3" (zerop 0.3) nil)
(test-is "zerop 0 43" (zerop 0) t)
(test-is "zerop -0.3" (zerop -0.3) nil)
(test-is "zerop -0.7" (zerop -0.7) nil)
(test-is "zerop -2" (zerop -2) nil)
(test-is "zerop -2.4" (zerop -2.4) nil)
(test-is "zerop -2.5" (zerop -2.5) nil)
(test-is "zerop -2.6" (zerop -2.6) nil)
(test-is "zerop -4" (zerop -4) nil)

(test-num "1- 4" (1- 4) 3)
(test-num "1- 2.6" (1- 2.6) 1.5999999)
(test-num "1- 2.5" (1- 2.5) 1.5)
(test-num "1- 2.4" (1- 2.4) 1.4000001)
(test-num "1- 2" (1- 2) 1)
(test-num "1- 0.7" (1- 0.7) -0.3)
(test-num "1- 0.3" (1- 0.3) -0.7)
(test-num "1- 0" (1- 0) -1)
(test-num "1- -0.3" (1- -0.3) -1.3)
(test-num "1- -0.7" (1- -0.7) -1.7)
(test-num "1- -2" (1- -2) -3)
(test-num "1- -2.4" (1- -2.4) -3.4)
(test-num "1- -2.5" (1- -2.5) -3.5)
(test-num "1- -2.6" (1- -2.6) -3.6)
(test-num "1- -4" (1- -4) -5)

(test-num "1+ 4" (1+ 4) 5)
(test-num "1+ 2.6" (1+ 2.6) 3.6)
(test-num "1+ 2.5" (1+ 2.5) 3.5)
(test-num "1+ 2.4" (1+ 2.4) 3.4)
(test-num "1+ 2" (1+ 2) 3)
(test-num "1+ 0.7" (1+ 0.7) 1.7)
(test-num "1+ 0.3" (1+ 0.3) 1.3)
(test-num "1+ 0" (1+ 0) 1)
(test-num "1+ -0.3" (1+ -0.3) 0.7)
(test-num "1+ -0.7" (1+ -0.7) 0.3)
(test-num "1+ -2" (1+ -2) -1)
(test-num "1+ -2.4" (1+ -2.4) -1.4000001)
(test-num "1+ -2.5" (1+ -2.5) -1.5)
(test-num "1+ -2.6" (1+ -2.6) -1.5999999)
(test-num "1+ -4" (1+ -4) -3)

(test-is "/= 0" (/= 1 2 3 4 5 6 7 8) t)
(test-is "/= 1" (/= 1 2 8 4 5 6 7 8) nil)
(test-is "/= 2" (/= 5 2 3 4 5 6 7 8) nil)
(test-is "/= 3" (/= 1 2 3 4 5 6 7.0 8) t)
(test-is "/= 4" (/= 8 8 8 8 8 8 8 8 8) nil)
(test-is "/= 1 3 4 4.002 13 33 91" (/= 1 3 4 4.002 13 33 91) t)
(test-is "/= 1 3 4 4.002 33 13 91" (/= 1 3 4 4.002 33 13 91) t)
(test-is "/= 91 33 13 4.002 4 3 1" (/= 91 33 13 4.002 4 3 1) t)
(test-is "/= 91 13 33 4.002 4 3 1" (/= 91 13 33 4.002 4 3 1) t)
(test-is "/= 1 3 4 4 4.002 13 33 91" (/= 1 3 4 4 4.002 13 33 91) nil)
(test-is "/= 1 3 4 4 4.002 33 13 91" (/= 1 3 4 4 4.002 33 13 91) nil)
(test-is "/= 91 33 13 4.002 4 4 3 1" (/= 91 33 13 4.002 4 4 3 1) nil)
(test-is "/= 91 13 33 4.002 4 4 3 1" (/= 91 13 33 4.002 4 4 3 1) nil)
(test-is "/= 1 2" (/= 1 2) t)
(test-is "/= 2 3" (/= 2 3) t)
(test-is "/= 4 3" (/= 4 3) t)
(test-is "/= 4 4" (/= 4 4) nil)
(test-is "/= 0 0" (/= 0 0) nil)
(test-is "/= 1 0" (/= 1 0) t)
(test-is "/= 0 1" (/= 0 1) t)

(test-is "<=> 1 2" (<=> 1 2) -1)
(test-is "<=> 2 3" (<=> 2 3) -1)
(test-is "<=> 4 3" (<=> 4 3) 1)
(test-is "<=> 4 4" (<=> 4 4) 0)
(test-is "<=> 0 0" (<=> 0 0) 0)
(test-is "<=> 1 0" (<=> 1 0) 1)
(test-is "<=> 0 1" (<=> 0 1) -1)

(test-is "< 1 2" (< 1 2) t)
(test-is "< 2 3" (< 2 3) t)
(test-is "< 4 3" (< 4 3) nil)
(test-is "< 4 4" (< 4 4) nil)
(test-is "< 0 0" (< 0 0) nil)
(test-is "< 1 0" (< 1 0) nil)
(test-is "< 0 1" (< 0 1) t)
(test-is "< 1 3 4 4.002 13 33 91" (< 1 3 4 4.002 13 33 91) t)
(test-is "< 1 3 4 4.002 33 13 91" (< 1 3 4 4.002 33 13 91) nil)
(test-is "< 91 33 13 4.002 4 3 1" (< 91 33 13 4.002 4 3 1) nil)
(test-is "< 91 13 33 4.002 4 3 1" (< 91 13 33 4.002 4 3 1) nil)
(test-is "< 1 3 4 4 4.002 13 33 91" (< 1 3 4 4 4.002 13 33 91) nil)
(test-is "< 1 3 4 4 4.002 33 13 91" (< 1 3 4 4 4.002 33 13 91) nil)
(test-is "< 91 33 13 4.002 4 4 3 1" (< 91 33 13 4.002 4 4 3 1) nil)
(test-is "< 91 13 33 4.002 4 4 3 1" (< 91 13 33 4.002 4 4 3 1) nil)

(test-is "<= 1 2" (<= 1 2) t)
(test-is "<= 2 3" (<= 2 3) t)
(test-is "<= 4 3" (<= 4 3) nil)
(test-is "<= 4 4" (<= 4 4) t)
(test-is "<= 0 0" (<= 0 0) t)
(test-is "<= 1 0" (<= 1 0) nil)
(test-is "<= 0 1" (<= 0 1) t)
(test-is "<= 1 3 4 4.002 13 33 91" (<= 1 3 4 4.002 13 33 91) t)
(test-is "<= 1 3 4 4.002 33 13 91" (<= 1 3 4 4.002 33 13 91) nil)
(test-is "<= 91 33 13 4.002 4 3 1" (<= 91 33 13 4.002 4 3 1) nil)
(test-is "<= 91 13 33 4.002 4 3 1" (<= 91 13 33 4.002 4 3 1) nil)
(test-is "<= 1 3 4 4 4.002 13 33 91" (<= 1 3 4 4 4.002 13 33 91) t)
(test-is "<= 1 3 4 4 4.002 33 13 91" (<= 1 3 4 4 4.002 33 13 91) nil)
(test-is "<= 91 33 13 4.002 4 4 3 1" (<= 91 33 13 4.002 4 4 3 1) nil)
(test-is "<= 91 13 33 4.002 4 4 3 1" (<= 91 13 33 4.002 4 4 3 1) nil)

(test-is "= 1 2" (= 1 2) nil)
(test-is "= 2 3" (= 2 3) nil)
(test-is "= 4 3" (= 4 3) nil)
(test-is "= 4 4" (= 4 4) t)
(test-is "= 0 0" (= 0 0) t)
(test-is "= 1 0" (= 1 0) nil)
(test-is "= 0 1" (= 0 1) nil)
(test-is "= 1 3 4 4.002 13 33 91" (= 1 3 4 4.002 13 33 91) nil)
(test-is "= 1 3 4 4.002 33 13 91" (= 1 3 4 4.002 33 13 91) nil)
(test-is "= 91 33 13 4.002 4 3 1" (= 91 33 13 4.002 4 3 1) nil)
(test-is "= 91 13 33 4.002 4 3 1" (= 91 13 33 4.002 4 3 1) nil)
(test-is "= 1 3 4 4 4.002 13 33 91" (= 1 3 4 4 4.002 13 33 91) nil)
(test-is "= 1 3 4 4 4.002 33 13 91" (= 1 3 4 4 4.002 33 13 91) nil)
(test-is "= 91 33 13 4.002 4 4 3 1" (= 91 33 13 4.002 4 4 3 1) nil)
(test-is "= 91 13 33 4.002 4 4 3 1" (= 91 13 33 4.002 4 4 3 1) nil)
(test-is "= 0" (= 1 2 3 4 5 6 7 8) nil)
(test-is "= 1" (= 1 2 8 4 5 6 7 8) nil)
(test-is "= 2" (= 5 2 3 4 5 6 7 8) nil)
(test-is "= 3" (= 1 2 3 4 5 6 7.0 8) nil)
(test-is "= 4" (= 8 8 8 8 8 8 8 8 8) t)

(test-is ">= 1 2" (>= 1 2) nil)
(test-is ">= 2 3" (>= 2 3) nil)
(test-is ">= 4 3" (>= 4 3) t)
(test-is ">= 4 4" (>= 4 4) t)
(test-is ">= 0 0" (>= 0 0) t)
(test-is ">= 1 0" (>= 1 0) t)
(test-is ">= 0 1" (>= 0 1) nil)
(test-is ">= 1 3 4 4.002 13 33 91" (>= 1 3 4 4.002 13 33 91) nil)
(test-is ">= 1 3 4 4.002 33 13 91" (>= 1 3 4 4.002 33 13 91) nil)
(test-is ">= 91 33 13 4.002 4 3 1" (>= 91 33 13 4.002 4 3 1) t)
(test-is ">= 91 13 33 4.002 4 3 1" (>= 91 13 33 4.002 4 3 1) nil)
(test-is ">= 1 3 4 4 4.002 13 33 91" (>= 1 3 4 4 4.002 13 33 91) nil)
(test-is ">= 1 3 4 4 4.002 33 13 91" (>= 1 3 4 4 4.002 33 13 91) nil)
(test-is ">= 91 33 13 4.002 4 4 3 1" (>= 91 33 13 4.002 4 4 3 1) t)
(test-is ">= 91 13 33 4.002 4 4 3 1" (>= 91 13 33 4.002 4 4 3 1) nil)

(test-is "> 1 2" (> 1 2) nil)
(test-is "> 2 3" (> 2 3) nil)
(test-is "> 4 3" (> 4 3) t)
(test-is "> 4 4" (> 4 4) nil)
(test-is "> 0 0" (> 0 0) nil)
(test-is "> 1 0" (> 1 0) t)
(test-is "> 0 1" (> 0 1) nil)
(test-is "> 1 3 4 4.002 13 33 91" (> 1 3 4 4.002 13 33 91) nil)
(test-is "> 1 3 4 4.002 33 13 91" (> 1 3 4 4.002 33 13 91) nil)
(test-is "> 91 33 13 4.002 4 3 1" (> 91 33 13 4.002 4 3 1) t)
(test-is "> 91 13 33 4.002 4 3 1" (> 91 13 33 4.002 4 3 1) nil)
(test-is "> 1 3 4 4 4.002 13 33 91" (> 1 3 4 4 4.002 13 33 91) nil)
(test-is "> 1 3 4 4 4.002 33 13 91" (> 1 3 4 4 4.002 33 13 91) nil)
(test-is "> 91 33 13 4.002 4 4 3 1" (> 91 33 13 4.002 4 4 3 1) nil)
(test-is "> 91 13 33 4.002 4 4 3 1" (> 91 13 33 4.002 4 4 3 1) nil)

(test-err "% 5" (% 5) #/too few normal args/)
(test-is "% 5 6" (% 5 6) 5)
(test-is "% 30 5" (% 30 5) 0)
(test-is "% 30 7" (% 30 7) 2)
(test-is "% 119 13" (% 119 13) 2)
(test-err "% 119 0" (% 119 0) #/integer divide by zero/)
(test-is "% 0 119" (% 0 119) 0)
(test-err "% 119 13 12" (% 119 13 12) #/too many normal arguments/)

(test-num "/ 5" (/ 5) 0.2)
(test-num "/ 5 6" (/ 5 6) 0.8333333)
(test-num "/ 30 5" (/ 30 5) 6)
(test-num "/ 30 7" (/ 30 7) 4.285714)
(test-num "/ 119 13" (/ 119 13) 9.153846)
(test-num "/ 119 0" (/ 119 0) Infinity)
(test-num "/ 0 119" (/ 0 119) 0)
(test-num "/ 119 13 12" (/ 119 13 12) 0.76282054)

(test-is "*" (*) 1)
(test-is "* 5" (* 5) 5)
(test-is "* 5 6" (* 5 6) 30)
(test-is "* 30 5" (* 30 5) 150)
(test-is "* 30 7" (* 30 7) 210)
(test-is "* 119 13" (* 119 13) 1547)
(test-is "* 119 0" (* 119 0) 0)
(test-is "* 0 119" (* 0 119) 0)
(test-is "* 119 13 12" (* 119 13 12) 18564)

(test-err "-" (-) #/too few normal args/)
(test-is "- 5" (- 5) -5)
(test-is "- 5 6" (- 5 6) -1)
(test-is "- 30 5" (- 30 5) 25)
(test-is "- 30 7" (- 30 7) 23)
(test-is "- 119 13" (- 119 13) 106)
(test-is "- 119 0" (- 119 0) 119)
(test-is "- 0 119" (- 0 119) -119)
(test-is "- 119 13 12" (- 119 13 12) 94)

(test-is "+" (+) 0)
(test-is "+ 5" (+ 5) 5)
(test-is "+ 5 6" (+ 5 6) 11)
(test-is "+ 30 5" (+ 30 5) 35)
(test-is "+ 30 7" (+ 30 7) 37)
(test-is "+ 119 13" (+ 119 13) 132)
(test-is "+ 119 0" (+ 119 0) 119)
(test-is "+ 0 119" (+ 0 119) 119)
(test-is "+ 119 13 12" (+ 119 13 12) 144)

(test-num "(rem -1 5)" (rem -1 5)  -1)
;;(test-num "(mod -1 5)" (mod -1 5)  4)
(test-num "(mod 13 4)" (mod 13 4)  1)
(test-num "(rem 13 4)" (rem 13 4)  1)
;;(test-num "(mod -13 4)" (mod -13 4)  3)
(test-num "(rem -13 4)" (rem -13 4)  -1)
;;(test-num "(mod 13 -4)" (mod 13 -4)  -3)
(test-num "(rem 13 -4)" (rem 13 -4)  1)
(test-num "(mod -13 -4)" (mod -13 -4)  -1)
(test-num "(rem -13 -4)" (rem -13 -4)  -1)
(test-num "(mod 13.4 1)" (mod 13.4 1)  0.4)
(test-num "(rem 13.4 1)" (rem 13.4 1)  0.4)
;;(test-num "(mod -13.4 1)" (mod -13.4 1)  0.6)
(test-num "(rem -13.4 1)" (rem -13.4 1)  -0.4)

(test-num "(div -1 5)" (div -1 5)  0)
(test-num "(div 13 4)" (div 13 4)  3)
(test-num "(div -13 4)" (div -13 4)  -3)
(test-num "(div 13 -4)" (div 13 -4)  -3)
(test-num "(div -13 -4)" (div -13 -4)  3)
(test-num "(div 13.4 1)" (div 13.4 1)  13)
(test-num "(div -13.4 1)" (div -13.4 1)  -13)

(test-is "seq up" (seq 1 10) '(1 2 3 4 5 6 7 8 9 10))
(test-is "seq down" (seq 10 1) '(10 9 8 7 6 5 4 3 2 1))
(test-is "seq 1" (seq 33 33) '(33))
(test-is "seq step up" (seq 33 100 17) '(33 50 67 84))
(test-is "seq step down 1" (seq 100 33 -17) '(100 83 66 49))
(test-is "seq step down 2" (seq 100 33 17) '())
(test-num "seq step float" (seq 1 10 3.4) '(1 4.4 7.8))

(test-is "lcm 15 20" (lcm 15 20) 60)
(test-is "lcm 10" (apply #'lcm (seq 1 10)) 2520)
(test-is "lcm 20" (apply #'lcm (seq 1 20)) 232792560)

(test-is "gcd 15 20" (gcd 15 20) 5)
(test-is "gcd 1000 2000" (gcd 1000 2000) 1000)
(test-is "gcd 38240 3125" (gcd 3840 3125) 5)

(test-is "digit-char-p /" (digit-char-p #\/) nil)
(test-is "digit-char-p 0" (digit-char-p #\0) 0)
(test-is "digit-char-p 1" (digit-char-p #\1) 1)
(test-is "digit-char-p 2" (digit-char-p #\2) 2)
(test-is "digit-char-p 3" (digit-char-p #\3) 3)
(test-is "digit-char-p 4" (digit-char-p #\4) 4)
(test-is "digit-char-p 5" (digit-char-p #\5) 5)
(test-is "digit-char-p 6" (digit-char-p #\6) 6)
(test-is "digit-char-p 7" (digit-char-p #\7) 7)
(test-is "digit-char-p 8" (digit-char-p #\8) 8)
(test-is "digit-char-p 9" (digit-char-p #\9) 9)
(test-is "digit-char-p a" (digit-char-p #\a) nil)
(test-is "digit-char-p b" (digit-char-p #\b) nil)
(test-is "digit-char-p c" (digit-char-p #\c) nil)
(test-is "digit-char-p d" (digit-char-p #\d) nil)
(test-is "digit-char-p e" (digit-char-p #\e) nil)
(test-is "digit-char-p f" (digit-char-p #\f) nil)
(test-is "digit-char-p g" (digit-char-p #\g) nil)
(test-is "digit-char-p h" (digit-char-p #\h) nil)
(test-is "digit-char-p i" (digit-char-p #\i) nil)
(test-is "digit-char-p j" (digit-char-p #\j) nil)
(test-is "digit-char-p k" (digit-char-p #\k) nil)
(test-is "digit-char-p l" (digit-char-p #\l) nil)
(test-is "digit-char-p m" (digit-char-p #\m) nil)
(test-is "digit-char-p n" (digit-char-p #\n) nil)
(test-is "digit-char-p o" (digit-char-p #\o) nil)
(test-is "digit-char-p p" (digit-char-p #\p) nil)
(test-is "digit-char-p q" (digit-char-p #\q) nil)
(test-is "digit-char-p r" (digit-char-p #\r) nil)
(test-is "digit-char-p s" (digit-char-p #\s) nil)
(test-is "digit-char-p t" (digit-char-p #\t) nil)
(test-is "digit-char-p u" (digit-char-p #\u) nil)
(test-is "digit-char-p v" (digit-char-p #\v) nil)
(test-is "digit-char-p w" (digit-char-p #\w) nil)
(test-is "digit-char-p x" (digit-char-p #\x) nil)
(test-is "digit-char-p y" (digit-char-p #\y) nil)
(test-is "digit-char-p z" (digit-char-p #\z) nil)
(test-is "digit-char-p A" (digit-char-p #\A) nil)
(test-is "digit-char-p B" (digit-char-p #\B) nil)
(test-is "digit-char-p C" (digit-char-p #\C) nil)
(test-is "digit-char-p D" (digit-char-p #\D) nil)
(test-is "digit-char-p E" (digit-char-p #\E) nil)
(test-is "digit-char-p F" (digit-char-p #\F) nil)
(test-is "digit-char-p G" (digit-char-p #\G) nil)
(test-is "digit-char-p H" (digit-char-p #\H) nil)
(test-is "digit-char-p I" (digit-char-p #\I) nil)
(test-is "digit-char-p J" (digit-char-p #\J) nil)
(test-is "digit-char-p K" (digit-char-p #\K) nil)
(test-is "digit-char-p L" (digit-char-p #\L) nil)
(test-is "digit-char-p M" (digit-char-p #\M) nil)
(test-is "digit-char-p N" (digit-char-p #\N) nil)
(test-is "digit-char-p O" (digit-char-p #\O) nil)
(test-is "digit-char-p P" (digit-char-p #\P) nil)
(test-is "digit-char-p Q" (digit-char-p #\Q) nil)
(test-is "digit-char-p R" (digit-char-p #\R) nil)
(test-is "digit-char-p S" (digit-char-p #\S) nil)
(test-is "digit-char-p T" (digit-char-p #\T) nil)
(test-is "digit-char-p U" (digit-char-p #\U) nil)
(test-is "digit-char-p V" (digit-char-p #\V) nil)
(test-is "digit-char-p W" (digit-char-p #\W) nil)
(test-is "digit-char-p X" (digit-char-p #\X) nil)
(test-is "digit-char-p Y" (digit-char-p #\Y) nil)
(test-is "digit-char-p Z" (digit-char-p #\Z) nil)

(test-is "digit-char-p 0 7" (digit-char-p #\0 7) 0)
(test-is "digit-char-p 1 7" (digit-char-p #\1 7) 1)
(test-is "digit-char-p 2 7" (digit-char-p #\2 7) 2)
(test-is "digit-char-p 3 7" (digit-char-p #\3 7) 3)
(test-is "digit-char-p 4 7" (digit-char-p #\4 7) 4)
(test-is "digit-char-p 5 7" (digit-char-p #\5 7) 5)
(test-is "digit-char-p 6 7" (digit-char-p #\6 7) 6)
(test-is "digit-char-p 7 7" (digit-char-p #\7 7) nil)
(test-is "digit-char-p 8 7" (digit-char-p #\8 7) nil)
(test-is "digit-char-p 9 7" (digit-char-p #\9 7) nil)
(test-is "digit-char-p a 7" (digit-char-p #\a 7) nil)
(test-is "digit-char-p b 7" (digit-char-p #\b 7) nil)
(test-is "digit-char-p c 7" (digit-char-p #\c 7) nil)
(test-is "digit-char-p d 7" (digit-char-p #\d 7) nil)
(test-is "digit-char-p e 7" (digit-char-p #\e 7) nil)
(test-is "digit-char-p f 7" (digit-char-p #\f 7) nil)
(test-is "digit-char-p g 7" (digit-char-p #\g 7) nil)
(test-is "digit-char-p h 7" (digit-char-p #\h 7) nil)
(test-is "digit-char-p i 7" (digit-char-p #\i 7) nil)
(test-is "digit-char-p j 7" (digit-char-p #\j 7) nil)
(test-is "digit-char-p k 7" (digit-char-p #\k 7) nil)
(test-is "digit-char-p l 7" (digit-char-p #\l 7) nil)
(test-is "digit-char-p m 7" (digit-char-p #\m 7) nil)
(test-is "digit-char-p n 7" (digit-char-p #\n 7) nil)
(test-is "digit-char-p o 7" (digit-char-p #\o 7) nil)
(test-is "digit-char-p p 7" (digit-char-p #\p 7) nil)
(test-is "digit-char-p q 7" (digit-char-p #\q 7) nil)
(test-is "digit-char-p r 7" (digit-char-p #\r 7) nil)
(test-is "digit-char-p s 7" (digit-char-p #\s 7) nil)
(test-is "digit-char-p t 7" (digit-char-p #\t 7) nil)
(test-is "digit-char-p u 7" (digit-char-p #\u 7) nil)
(test-is "digit-char-p v 7" (digit-char-p #\v 7) nil)
(test-is "digit-char-p w 7" (digit-char-p #\w 7) nil)
(test-is "digit-char-p x 7" (digit-char-p #\x 7) nil)
(test-is "digit-char-p y 7" (digit-char-p #\y 7) nil)
(test-is "digit-char-p z 7" (digit-char-p #\z 7) nil)
(test-is "digit-char-p A 7" (digit-char-p #\A 7) nil)
(test-is "digit-char-p B 7" (digit-char-p #\B 7) nil)
(test-is "digit-char-p C 7" (digit-char-p #\C 7) nil)
(test-is "digit-char-p D 7" (digit-char-p #\D 7) nil)
(test-is "digit-char-p E 7" (digit-char-p #\E 7) nil)
(test-is "digit-char-p F 7" (digit-char-p #\F 7) nil)
(test-is "digit-char-p G 7" (digit-char-p #\G 7) nil)
(test-is "digit-char-p H 7" (digit-char-p #\H 7) nil)
(test-is "digit-char-p I 7" (digit-char-p #\I 7) nil)
(test-is "digit-char-p J 7" (digit-char-p #\J 7) nil)
(test-is "digit-char-p K 7" (digit-char-p #\K 7) nil)
(test-is "digit-char-p L 7" (digit-char-p #\L 7) nil)
(test-is "digit-char-p M 7" (digit-char-p #\M 7) nil)
(test-is "digit-char-p N 7" (digit-char-p #\N 7) nil)
(test-is "digit-char-p O 7" (digit-char-p #\O 7) nil)
(test-is "digit-char-p P 7" (digit-char-p #\P 7) nil)
(test-is "digit-char-p Q 7" (digit-char-p #\Q 7) nil)
(test-is "digit-char-p R 7" (digit-char-p #\R 7) nil)
(test-is "digit-char-p S 7" (digit-char-p #\S 7) nil)
(test-is "digit-char-p T 7" (digit-char-p #\T 7) nil)
(test-is "digit-char-p U 7" (digit-char-p #\U 7) nil)
(test-is "digit-char-p V 7" (digit-char-p #\V 7) nil)
(test-is "digit-char-p W 7" (digit-char-p #\W 7) nil)
(test-is "digit-char-p X 7" (digit-char-p #\X 7) nil)
(test-is "digit-char-p Y 7" (digit-char-p #\Y 7) nil)
(test-is "digit-char-p Z 7" (digit-char-p #\Z 7) nil)

(test-is "digit-char-p 0 12" (digit-char-p #\0 12) 0)
(test-is "digit-char-p 1 12" (digit-char-p #\1 12) 1)
(test-is "digit-char-p 2 12" (digit-char-p #\2 12) 2)
(test-is "digit-char-p 3 12" (digit-char-p #\3 12) 3)
(test-is "digit-char-p 4 12" (digit-char-p #\4 12) 4)
(test-is "digit-char-p 5 12" (digit-char-p #\5 12) 5)
(test-is "digit-char-p 6 12" (digit-char-p #\6 12) 6)
(test-is "digit-char-p 7 12" (digit-char-p #\7 12) 7)
(test-is "digit-char-p 8 12" (digit-char-p #\8 12) 8)
(test-is "digit-char-p 9 12" (digit-char-p #\9 12) 9)
(test-is "digit-char-p a 12" (digit-char-p #\a 12) 10)
(test-is "digit-char-p b 12" (digit-char-p #\b 12) 11)
(test-is "digit-char-p c 12" (digit-char-p #\c 12) nil)
(test-is "digit-char-p d 12" (digit-char-p #\d 12) nil)
(test-is "digit-char-p e 12" (digit-char-p #\e 12) nil)
(test-is "digit-char-p f 12" (digit-char-p #\f 12) nil)
(test-is "digit-char-p g 12" (digit-char-p #\g 12) nil)
(test-is "digit-char-p h 12" (digit-char-p #\h 12) nil)
(test-is "digit-char-p i 12" (digit-char-p #\i 12) nil)
(test-is "digit-char-p j 12" (digit-char-p #\j 12) nil)
(test-is "digit-char-p k 12" (digit-char-p #\k 12) nil)
(test-is "digit-char-p l 12" (digit-char-p #\l 12) nil)
(test-is "digit-char-p m 12" (digit-char-p #\m 12) nil)
(test-is "digit-char-p n 12" (digit-char-p #\n 12) nil)
(test-is "digit-char-p o 12" (digit-char-p #\o 12) nil)
(test-is "digit-char-p p 12" (digit-char-p #\p 12) nil)
(test-is "digit-char-p q 12" (digit-char-p #\q 12) nil)
(test-is "digit-char-p r 12" (digit-char-p #\r 12) nil)
(test-is "digit-char-p s 12" (digit-char-p #\s 12) nil)
(test-is "digit-char-p t 12" (digit-char-p #\t 12) nil)
(test-is "digit-char-p u 12" (digit-char-p #\u 12) nil)
(test-is "digit-char-p v 12" (digit-char-p #\v 12) nil)
(test-is "digit-char-p w 12" (digit-char-p #\w 12) nil)
(test-is "digit-char-p x 12" (digit-char-p #\x 12) nil)
(test-is "digit-char-p y 12" (digit-char-p #\y 12) nil)
(test-is "digit-char-p z 12" (digit-char-p #\z 12) nil)
(test-is "digit-char-p A 12" (digit-char-p #\A 12) 10)
(test-is "digit-char-p B 12" (digit-char-p #\B 12) 11)
(test-is "digit-char-p C 12" (digit-char-p #\C 12) nil)
(test-is "digit-char-p D 12" (digit-char-p #\D 12) nil)
(test-is "digit-char-p E 12" (digit-char-p #\E 12) nil)
(test-is "digit-char-p F 12" (digit-char-p #\F 12) nil)
(test-is "digit-char-p G 12" (digit-char-p #\G 12) nil)
(test-is "digit-char-p H 12" (digit-char-p #\H 12) nil)
(test-is "digit-char-p I 12" (digit-char-p #\I 12) nil)
(test-is "digit-char-p J 12" (digit-char-p #\J 12) nil)
(test-is "digit-char-p K 12" (digit-char-p #\K 12) nil)
(test-is "digit-char-p L 12" (digit-char-p #\L 12) nil)
(test-is "digit-char-p M 12" (digit-char-p #\M 12) nil)
(test-is "digit-char-p N 12" (digit-char-p #\N 12) nil)
(test-is "digit-char-p O 12" (digit-char-p #\O 12) nil)
(test-is "digit-char-p P 12" (digit-char-p #\P 12) nil)
(test-is "digit-char-p Q 12" (digit-char-p #\Q 12) nil)
(test-is "digit-char-p R 12" (digit-char-p #\R 12) nil)
(test-is "digit-char-p S 12" (digit-char-p #\S 12) nil)
(test-is "digit-char-p T 12" (digit-char-p #\T 12) nil)
(test-is "digit-char-p U 12" (digit-char-p #\U 12) nil)
(test-is "digit-char-p V 12" (digit-char-p #\V 12) nil)
(test-is "digit-char-p W 12" (digit-char-p #\W 12) nil)
(test-is "digit-char-p X 12" (digit-char-p #\X 12) nil)
(test-is "digit-char-p Y 12" (digit-char-p #\Y 12) nil)
(test-is "digit-char-p Z 12" (digit-char-p #\Z 12) nil)

(test-is "digit-char-p 0 29" (digit-char-p #\0 29) 0)
(test-is "digit-char-p 1 29" (digit-char-p #\1 29) 1)
(test-is "digit-char-p 2 29" (digit-char-p #\2 29) 2)
(test-is "digit-char-p 3 29" (digit-char-p #\3 29) 3)
(test-is "digit-char-p 4 29" (digit-char-p #\4 29) 4)
(test-is "digit-char-p 5 29" (digit-char-p #\5 29) 5)
(test-is "digit-char-p 6 29" (digit-char-p #\6 29) 6)
(test-is "digit-char-p 7 29" (digit-char-p #\7 29) 7)
(test-is "digit-char-p 8 29" (digit-char-p #\8 29) 8)
(test-is "digit-char-p 9 29" (digit-char-p #\9 29) 9)
(test-is "digit-char-p a 29" (digit-char-p #\a 29) 10)
(test-is "digit-char-p b 29" (digit-char-p #\b 29) 11)
(test-is "digit-char-p c 29" (digit-char-p #\c 29) 12)
(test-is "digit-char-p d 29" (digit-char-p #\d 29) 13)
(test-is "digit-char-p e 29" (digit-char-p #\e 29) 14)
(test-is "digit-char-p f 29" (digit-char-p #\f 29) 15)
(test-is "digit-char-p g 29" (digit-char-p #\g 29) 16)
(test-is "digit-char-p h 29" (digit-char-p #\h 29) 17)
(test-is "digit-char-p i 29" (digit-char-p #\i 29) 18)
(test-is "digit-char-p j 29" (digit-char-p #\j 29) 19)
(test-is "digit-char-p k 29" (digit-char-p #\k 29) 20)
(test-is "digit-char-p l 29" (digit-char-p #\l 29) 21)
(test-is "digit-char-p m 29" (digit-char-p #\m 29) 22)
(test-is "digit-char-p n 29" (digit-char-p #\n 29) 23)
(test-is "digit-char-p o 29" (digit-char-p #\o 29) 24)
(test-is "digit-char-p p 29" (digit-char-p #\p 29) 25)
(test-is "digit-char-p q 29" (digit-char-p #\q 29) 26)
(test-is "digit-char-p r 29" (digit-char-p #\r 29) 27)
(test-is "digit-char-p s 29" (digit-char-p #\s 29) 28)
(test-is "digit-char-p t 29" (digit-char-p #\t 29) nil)
(test-is "digit-char-p u 29" (digit-char-p #\u 29) nil)
(test-is "digit-char-p v 29" (digit-char-p #\v 29) nil)
(test-is "digit-char-p w 29" (digit-char-p #\w 29) nil)
(test-is "digit-char-p x 29" (digit-char-p #\x 29) nil)
(test-is "digit-char-p y 29" (digit-char-p #\y 29) nil)
(test-is "digit-char-p z 29" (digit-char-p #\z 29) nil)
(test-is "digit-char-p A 29" (digit-char-p #\A 29) 10)
(test-is "digit-char-p B 29" (digit-char-p #\B 29) 11)
(test-is "digit-char-p C 29" (digit-char-p #\C 29) 12)
(test-is "digit-char-p D 29" (digit-char-p #\D 29) 13)
(test-is "digit-char-p E 29" (digit-char-p #\E 29) 14)
(test-is "digit-char-p F 29" (digit-char-p #\F 29) 15)
(test-is "digit-char-p G 29" (digit-char-p #\G 29) 16)
(test-is "digit-char-p H 29" (digit-char-p #\H 29) 17)
(test-is "digit-char-p I 29" (digit-char-p #\I 29) 18)
(test-is "digit-char-p J 29" (digit-char-p #\J 29) 19)
(test-is "digit-char-p K 29" (digit-char-p #\K 29) 20)
(test-is "digit-char-p L 29" (digit-char-p #\L 29) 21)
(test-is "digit-char-p M 29" (digit-char-p #\M 29) 22)
(test-is "digit-char-p N 29" (digit-char-p #\N 29) 23)
(test-is "digit-char-p O 29" (digit-char-p #\O 29) 24)
(test-is "digit-char-p P 29" (digit-char-p #\P 29) 25)
(test-is "digit-char-p Q 29" (digit-char-p #\Q 29) 26)
(test-is "digit-char-p R 29" (digit-char-p #\R 29) 27)
(test-is "digit-char-p S 29" (digit-char-p #\S 29) 28)
(test-is "digit-char-p T 29" (digit-char-p #\T 29) nil)
(test-is "digit-char-p U 29" (digit-char-p #\U 29) nil)
(test-is "digit-char-p V 29" (digit-char-p #\V 29) nil)
(test-is "digit-char-p W 29" (digit-char-p #\W 29) nil)
(test-is "digit-char-p X 29" (digit-char-p #\X 29) nil)
(test-is "digit-char-p Y 29" (digit-char-p #\Y 29) nil)
(test-is "digit-char-p Z 29" (digit-char-p #\Z 29) nil)

(test-is "digit-char-p 0 36" (digit-char-p #\0 36) 0)
(test-is "digit-char-p 1 36" (digit-char-p #\1 36) 1)
(test-is "digit-char-p 2 36" (digit-char-p #\2 36) 2)
(test-is "digit-char-p 3 36" (digit-char-p #\3 36) 3)
(test-is "digit-char-p 4 36" (digit-char-p #\4 36) 4)
(test-is "digit-char-p 5 36" (digit-char-p #\5 36) 5)
(test-is "digit-char-p 6 36" (digit-char-p #\6 36) 6)
(test-is "digit-char-p 7 36" (digit-char-p #\7 36) 7)
(test-is "digit-char-p 8 36" (digit-char-p #\8 36) 8)
(test-is "digit-char-p 9 36" (digit-char-p #\9 36) 9)
(test-is "digit-char-p a 36" (digit-char-p #\a 36) 10)
(test-is "digit-char-p b 36" (digit-char-p #\b 36) 11)
(test-is "digit-char-p c 36" (digit-char-p #\c 36) 12)
(test-is "digit-char-p d 36" (digit-char-p #\d 36) 13)
(test-is "digit-char-p e 36" (digit-char-p #\e 36) 14)
(test-is "digit-char-p f 36" (digit-char-p #\f 36) 15)
(test-is "digit-char-p g 36" (digit-char-p #\g 36) 16)
(test-is "digit-char-p h 36" (digit-char-p #\h 36) 17)
(test-is "digit-char-p i 36" (digit-char-p #\i 36) 18)
(test-is "digit-char-p j 36" (digit-char-p #\j 36) 19)
(test-is "digit-char-p k 36" (digit-char-p #\k 36) 20)
(test-is "digit-char-p l 36" (digit-char-p #\l 36) 21)
(test-is "digit-char-p m 36" (digit-char-p #\m 36) 22)
(test-is "digit-char-p n 36" (digit-char-p #\n 36) 23)
(test-is "digit-char-p o 36" (digit-char-p #\o 36) 24)
(test-is "digit-char-p p 36" (digit-char-p #\p 36) 25)
(test-is "digit-char-p q 36" (digit-char-p #\q 36) 26)
(test-is "digit-char-p r 36" (digit-char-p #\r 36) 27)
(test-is "digit-char-p s 36" (digit-char-p #\s 36) 28)
(test-is "digit-char-p t 36" (digit-char-p #\t 36) 29)
(test-is "digit-char-p u 36" (digit-char-p #\u 36) 30)
(test-is "digit-char-p v 36" (digit-char-p #\v 36) 31)
(test-is "digit-char-p w 36" (digit-char-p #\w 36) 32)
(test-is "digit-char-p x 36" (digit-char-p #\x 36) 33)
(test-is "digit-char-p y 36" (digit-char-p #\y 36) 34)
(test-is "digit-char-p z 36" (digit-char-p #\z 36) 35)
(test-is "digit-char-p A 36" (digit-char-p #\A 36) 10)
(test-is "digit-char-p B 36" (digit-char-p #\B 36) 11)
(test-is "digit-char-p C 36" (digit-char-p #\C 36) 12)
(test-is "digit-char-p D 36" (digit-char-p #\D 36) 13)
(test-is "digit-char-p E 36" (digit-char-p #\E 36) 14)
(test-is "digit-char-p F 36" (digit-char-p #\F 36) 15)
(test-is "digit-char-p G 36" (digit-char-p #\G 36) 16)
(test-is "digit-char-p H 36" (digit-char-p #\H 36) 17)
(test-is "digit-char-p I 36" (digit-char-p #\I 36) 18)
(test-is "digit-char-p J 36" (digit-char-p #\J 36) 19)
(test-is "digit-char-p K 36" (digit-char-p #\K 36) 20)
(test-is "digit-char-p L 36" (digit-char-p #\L 36) 21)
(test-is "digit-char-p M 36" (digit-char-p #\M 36) 22)
(test-is "digit-char-p N 36" (digit-char-p #\N 36) 23)
(test-is "digit-char-p O 36" (digit-char-p #\O 36) 24)
(test-is "digit-char-p P 36" (digit-char-p #\P 36) 25)
(test-is "digit-char-p Q 36" (digit-char-p #\Q 36) 26)
(test-is "digit-char-p R 36" (digit-char-p #\R 36) 27)
(test-is "digit-char-p S 36" (digit-char-p #\S 36) 28)
(test-is "digit-char-p T 36" (digit-char-p #\T 36) 29)
(test-is "digit-char-p U 36" (digit-char-p #\U 36) 30)
(test-is "digit-char-p V 36" (digit-char-p #\V 36) 31)
(test-is "digit-char-p W 36" (digit-char-p #\W 36) 32)
(test-is "digit-char-p X 36" (digit-char-p #\X 36) 33)
(test-is "digit-char-p Y 36" (digit-char-p #\Y 36) 34)
(test-is "digit-char-p Z 36" (digit-char-p #\Z 36) 35)
(test-is "digit-char-p [ 36" (digit-char-p #\[ 36) nil)

(test-is "digit-char-p 0 2" (digit-char-p #\0 2) 0)
(test-is "digit-char-p 1 2" (digit-char-p #\1 2) 1)
(test-is "digit-char-p 2 2" (digit-char-p #\2 2) nil)
(test-is "digit-char-p 3 2" (digit-char-p #\3 2) nil)
(test-is "digit-char-p 4 2" (digit-char-p #\4 2) nil)
(test-is "digit-char-p 5 2" (digit-char-p #\5 2) nil)
(test-is "digit-char-p 6 2" (digit-char-p #\6 2) nil)
(test-is "digit-char-p 7 2" (digit-char-p #\7 2) nil)
(test-is "digit-char-p 8 2" (digit-char-p #\8 2) nil)
(test-is "digit-char-p 9 2" (digit-char-p #\9 2) nil)
(test-is "digit-char-p a 2" (digit-char-p #\a 2) nil)
(test-is "digit-char-p b 2" (digit-char-p #\b 2) nil)
(test-is "digit-char-p c 2" (digit-char-p #\c 2) nil)
(test-is "digit-char-p d 2" (digit-char-p #\d 2) nil)
(test-is "digit-char-p e 2" (digit-char-p #\e 2) nil)
(test-is "digit-char-p f 2" (digit-char-p #\f 2) nil)
(test-is "digit-char-p g 2" (digit-char-p #\g 2) nil)
(test-is "digit-char-p h 2" (digit-char-p #\h 2) nil)
(test-is "digit-char-p i 2" (digit-char-p #\i 2) nil)
(test-is "digit-char-p j 2" (digit-char-p #\j 2) nil)
(test-is "digit-char-p k 2" (digit-char-p #\k 2) nil)
(test-is "digit-char-p l 2" (digit-char-p #\l 2) nil)
(test-is "digit-char-p m 2" (digit-char-p #\m 2) nil)
(test-is "digit-char-p n 2" (digit-char-p #\n 2) nil)
(test-is "digit-char-p o 2" (digit-char-p #\o 2) nil)
(test-is "digit-char-p p 2" (digit-char-p #\p 2) nil)
(test-is "digit-char-p q 2" (digit-char-p #\q 2) nil)
(test-is "digit-char-p r 2" (digit-char-p #\r 2) nil)
(test-is "digit-char-p s 2" (digit-char-p #\s 2) nil)
(test-is "digit-char-p t 2" (digit-char-p #\t 2) nil)
(test-is "digit-char-p u 2" (digit-char-p #\u 2) nil)
(test-is "digit-char-p v 2" (digit-char-p #\v 2) nil)
(test-is "digit-char-p w 2" (digit-char-p #\w 2) nil)
(test-is "digit-char-p x 2" (digit-char-p #\x 2) nil)
(test-is "digit-char-p y 2" (digit-char-p #\y 2) nil)
(test-is "digit-char-p z 2" (digit-char-p #\z 2) nil)
(test-is "digit-char-p A 2" (digit-char-p #\A 2) nil)
(test-is "digit-char-p B 2" (digit-char-p #\B 2) nil)
(test-is "digit-char-p C 2" (digit-char-p #\C 2) nil)
(test-is "digit-char-p D 2" (digit-char-p #\D 2) nil)
(test-is "digit-char-p E 2" (digit-char-p #\E 2) nil)
(test-is "digit-char-p F 2" (digit-char-p #\F 2) nil)
(test-is "digit-char-p G 2" (digit-char-p #\G 2) nil)
(test-is "digit-char-p H 2" (digit-char-p #\H 2) nil)
(test-is "digit-char-p I 2" (digit-char-p #\I 2) nil)
(test-is "digit-char-p J 2" (digit-char-p #\J 2) nil)
(test-is "digit-char-p K 2" (digit-char-p #\K 2) nil)
(test-is "digit-char-p L 2" (digit-char-p #\L 2) nil)
(test-is "digit-char-p M 2" (digit-char-p #\M 2) nil)
(test-is "digit-char-p N 2" (digit-char-p #\N 2) nil)
(test-is "digit-char-p O 2" (digit-char-p #\O 2) nil)
(test-is "digit-char-p P 2" (digit-char-p #\P 2) nil)
(test-is "digit-char-p Q 2" (digit-char-p #\Q 2) nil)
(test-is "digit-char-p R 2" (digit-char-p #\R 2) nil)
(test-is "digit-char-p S 2" (digit-char-p #\S 2) nil)
(test-is "digit-char-p T 2" (digit-char-p #\T 2) nil)
(test-is "digit-char-p U 2" (digit-char-p #\U 2) nil)
(test-is "digit-char-p V 2" (digit-char-p #\V 2) nil)
(test-is "digit-char-p W 2" (digit-char-p #\W 2) nil)
(test-is "digit-char-p X 2" (digit-char-p #\X 2) nil)
(test-is "digit-char-p Y 2" (digit-char-p #\Y 2) nil)
(test-is "digit-char-p Z 2" (digit-char-p #\Z 2) nil)
(test-is "digit-char-p [ 2" (digit-char-p #\[ 2) nil)

(test-is "digit-char-p / 3" (digit-char-p #\/ 3) nil)
(test-is "digit-char-p 2 3" (digit-char-p #\2 3) 2)
(test-is "digit-char-p 3 3" (digit-char-p #\3 3) nil)

(test-err "digit-char-p 3 1" (digit-char-p #\3 1)
           #r"radix .* is not in the range")
(test-err "digit-char-p 3 37" (digit-char-p #\3 37)
           #r"radix .* is not in the range")

(test-is "parse-integer 0" (parse-integer "0") 0)
(test-is "parse-integer 12" (parse-integer "12") 12)
(test-is "parse-integer +12" (parse-integer "+12") 12)
(test-is "parse-integer -12" (parse-integer "-12") -12)
(test-is "parse-integer 123456" (parse-integer "123456") 123456)
(test-is "parse-integer 123456 2" (parse-integer "123456" :start 2) 3456)
(test-err "parse-integer 123456 19" (parse-integer "123456" :start 19)
          #/out of bounds for length/)
(test-err "parse-integer 123456 rad 2" (parse-integer "123456" :radix 2)
          #/invalid char/)
(test-is "parse-integer -11101 rad 2" (parse-integer "-11101" :radix 2) -29)
(test-is "parse-integer +11101 rad 9" (parse-integer "+11101" :radix 9) 7372)

(test-err "parse-integer 11" (parse-integer "   123456  "
                                            :start 11 :end 10 :radix 10)
          #/out of bounds/)
(test-is "parse-integer 11a" (parse-integer "   123456defg"
                                            :start 1 :end 10 :radix 10
                                            :junk-allowed t)
         123456)

(test-is "parse-integer 13" (parse-integer "\n\t\r\v 64927"
                                           :radix 13 :junk-allowed t)
         181708)

(test-is "parse-integer 14" (parse-integer "   deadbeef "
                                           :radix 19 :junk-allowed t)
         12305510888)
(test-err "parse-integer 14a" (parse-integer "   deadbeef xxx"
                                             :start 0 :end nil :radix 19
                                             :junk-allowed nil)
         #/invalid character ` `/)
(test-err "parse-integer 14b" (parse-integer "deadbeef" :radix 10)
         #/invalid character `d`/)

(test-is "parse-integer 15" (parse-integer "123")
         123)
(test-is "parse-integer 16" (parse-integer "123" :start 1 :radix 5) 13)
(test-is "parse-integer 17" (parse-integer "no-integer" :junk-allowed t)
         nil)



(done-testing)
